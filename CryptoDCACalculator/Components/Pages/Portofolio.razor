@page "/portofolio"
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering]

@using CryptoDCACalculator.DTOs
@using CryptoDCACalculator.Entities
@using MudBlazor
@using System.Text.Json

<PageTitle>Portofolio</PageTitle>

<h1>Portofolio</h1>

<p>This component demonstrates displaying cryptocurrency data.</p>

@if (cryptocurrencies == null)
{
    <p><em>Loading...</em></p>
}
else if (cryptocurrencies.Count == 0)
{
    <p>No cryptocurrencies available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Cryptocurrency</th>
                <th>Value Today</th>
                <th>Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cryptocurrency in cryptocurrencies)
            {
                <tr>
                    <td><input type="checkbox" @onchange="(e) => CheckboxChanged(e,cryptocurrency)" /></td>
                    <td>@cryptocurrency.Name</td>
                    <td>@((cryptocurrency.LatestPrice != null ? cryptocurrency.LatestPrice : "-"))</td>
                    <td>@(cryptocurrency.LatestPriceTimestamp != null ? cryptocurrency.LatestPriceTimestamp?.ToString("g") : "-")</td>
                </tr>

            }
        </tbody>
    </table>

    <hr class="mt-5 mb-5" />

    @if (!selectedCryptos.Any())
    {
        <p><em>Please select a crypto</em></p>
    }
    else
    {
        <MudItem xs="12" sm="6" md="4">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Start date" @bind-Date="@StartDate" HelperText="date picker" DateFormat="dd/MM/yyyy" />
        </MudItem>
        @if (filteredInvestedCryptocurrencies == null || !filteredInvestedCryptocurrencies.Any())
        {
            <p><em>No investments found for the selected date</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Crypto</th>
                        <th>Date</th>
                        <th>Invested amount</th>
                        <th>Coin Amount</th>
                        <th>Value Today</th>
                        <th>ROI</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var crypto in filteredInvestedCryptocurrencies)
                    {
                        @foreach (var investment in crypto.CryptoInvestment)
                        {
                            <tr>
                                <td>@crypto.CryptoName</td>
                                <td>@investment.Timestamp</td>
                                <td>@investment.Amount</td>
                                <td>@investment.CryptoAmount</td>
                                <td>@crypto.CryptoCurrentValue</td>
                                <td>@investment.ROI</td>
                            </tr>
                        }

                    }
                </tbody>
            </table>
        }
    }

}

@code {
    private List<CryptocurrencyDTO> cryptocurrencies;


    private List<CryptocurrencyInvestmentDTO> investedCryptocurrencies;

    public List<Guid> selectedCryptos = new List<Guid>();

    string errormessage = "error";

    private List<CryptocurrencyInvestmentDTO> filteredInvestedCryptocurrencies;

    [Inject]
    private HttpClient Http { get; set; }

    private string errorMessage;


    DateTime? _StartDate = DateTime.Parse("01/01/2024");

    private DateTime? StartDate
    {
        get => _StartDate;
        set
        {
            _StartDate = value;
            OnDateChange();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            cryptocurrencies = await Http.GetFromJsonAsync<List<CryptocurrencyDTO>>("http://localhost:5107/api/Cryptocurrency");

            if (cryptocurrencies == null || cryptocurrencies.Count == 0)
            {
                errorMessage = "No cryptocurrencies found or API returned no data.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while fetching data: {ex.Message}";
        }
    }

    public async void CheckboxChanged(ChangeEventArgs ev, CryptocurrencyDTO crypto)
    {
        var cryptoSelected = (bool)ev.Value;

        if (cryptoSelected)
        {
            selectedCryptos.Add(crypto.ID);

            investedCryptocurrencies = selectedCryptos.Any()
          ? await Http.GetFromJsonAsync<List<CryptocurrencyInvestmentDTO>>(
                "http://localhost:5107/api/Cryptocurrency/InvestInfo?" +
                string.Join("&", selectedCryptos.Select(id => "ids=" + id.ToString())))
          : new List<CryptocurrencyInvestmentDTO>();
        }
        else
        {
            selectedCryptos.Remove(crypto.ID);
            investedCryptocurrencies.RemoveAll(c => c.CryptoID == crypto.ID);
        }

        ApplyFilter();
    }

    public async void OnDateChange()
    {
        ApplyFilter();
    }

    public void ApplyFilter()
    {
        filteredInvestedCryptocurrencies = JsonSerializer.Deserialize<List<CryptocurrencyInvestmentDTO>>(JsonSerializer.Serialize(investedCryptocurrencies)); //clone original data

        filteredInvestedCryptocurrencies.ForEach(ic =>
        {
            ic.CryptoInvestment = ic.CryptoInvestment
                .Where(i => i.Timestamp >= StartDate)
                .OrderByDescending(i => i.Timestamp);
        });
        filteredInvestedCryptocurrencies = filteredInvestedCryptocurrencies.Where(ic => ic.CryptoInvestment.Any(i => i.Timestamp >= StartDate)).ToList();


        StateHasChanged();
    }
}